/* 
 * Kernel Linker Script (kernel.ld)
 * 
 * 이 링커 스크립트는 커널을 특정 메모리 주소 (`0x80200000`)에 로드하고,
 * 실행될 때 필요한 `.text`, `.rodata`, `.data`, `.bss` 등의 섹션을 메모리에 배치하는 역할을 합니다.
 * 또한, BSS 초기화 범위를 정의하고, 커널이 사용할 스택의 최상단 주소(__stack_top)를 설정합니다.
 */

ENTRY(boot)  /* 실행 엔트리 포인트를 `boot` 함수로 설정(kernel.zig) */

SECTIONS {
    /* 
     * 1. 프로그램 시작 주소 설정
     * - 커널을 0x80200000에 로드함.
     * - CPU가 부팅 시 해당 주소에서 커널을 실행하도록 하기 위함.
     */
    . = 0x80200000;

    /* 
     * 2. 코드 섹션 (.text)
     * - 실행 가능한 코드(함수)를 포함
     * - 부트 코드 (`.text.boot`)는 삭제되지 않도록 `KEEP()`을 사용하여 강제 포함
     * - 이후 일반 `.text` 및 `.text.*` 섹션을 포함
     */
    .text : {
        KEEP(*(.text.boot));  /* 부트 코드 보존 */
        *(.text .text.*);     /* 나머지 코드 섹션 포함 */
    }

    /* 
     * 3. 읽기 전용 데이터 (.rodata)
     * - 문자열 리터럴, 상수 테이블 등 읽기 전용 데이터를 포함
     * - 4바이트 정렬 (ALIGN(4)) 적용
     */
    .rodata : ALIGN(4) {
        *(.rodata .rodata.*);
    }

    /* 
     * 4. 초기화된 데이터 (.data)
     * - 정적 전역 변수 중 초기화된 데이터를 포함
     * - 4바이트 정렬 (ALIGN(4)) 적용
     */
    .data : ALIGN(4) {
        *(.data .data.*);
    }

    /* 
     * 5. 초기화되지 않은 데이터 (.bss)
     * - 정적 전역 변수 중 초기화되지 않은 변수를 포함
     * - BSS는 실행 중 0으로 초기화됨.
     * - `__bss`와 `__bss_end` 심볼을 정의하여 BSS 영역을 초기화할 때 사용 가능.
     */
    .bss : ALIGN(4) {
        __bss = .;  /* BSS 시작 주소 */
        *(.bss .bss.* .sbss .sbss.*);  /* BSS 및 작은 BSS(Small BSS) 포함 */
        __bss_end = .;  /* BSS 종료 주소 */
    }

    /* 
     * 6. 스택 설정 (__stack_top)
     * - 현재 주소(`.`)를 4바이트 정렬
     * - 이후 128KB(128 * 1024)만큼 증가 → 커널 스택 공간 확보
     * - `__stack_top` 심볼을 정의하여, 커널이 사용할 스택 최상단 주소를 설정
     */
    . = ALIGN(4);  /* 현재 주소를 4바이트 정렬 */
    . += 128 * 1024; /* 128KB 스택 공간 확보 */
    __stack_top = .;  /* 커널의 스택 최상단 주소 */
}
